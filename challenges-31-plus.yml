frame_redirect:
  question: |
    On our cart page, we have a `<turbo-frame id="cart-summary">` that renders a
    short list of the items in our cart. This works great! But now, in our base
    layout, we want to render a link on our sidebar that, on click, loads this
    "cart summary" into the sidebar:

    ```html
    <turbo-frame id="sidebar">
        <!-- ... -->

        <a href="{{ path('app_cart') }}">Show Cart Summary</a>
    </turbo>
    ```

    Unfortunately, when we try this, we get an error because the `turbo-frame`
    looks for a `sidebar` frame on the cart page. How could me modify the cart
    page to get this to work?
  explanation: |
    Whenever Turbo sends a request from one of its frames, it sends the header
    `Turbo-Frame:` and the id of the frame it's sending the request from. This
    is useful for us to know what to do with it!
  features:
    multiple_choice:
      choices:
        a: |
          ```php
          /*
           * Renders the Cart Summary in the cart-summary turbo frame
           */
          public function showCartSummary(Request $request): Response
          {
              $frameId = $request->headers->get('Turbo-Frame', 'cart-summary');

              return $this->render('cartSummary.html.twig', [
                  frameId => $frameId,
              ]);
          }
          ```
        b: |
          ```php
          /*
           * Renders the Cart Summary in the cart-summary turbo frame
           */
          public function showCartSummary(Request $request): Response
          {
              $frameId = $request->headers->get('Turbo-Frame', '_top');

              return $this->render('cartSummary.html.twig', [
                  frameId => $frameId,
              ]);
          }
          ```
        c: |
          ```php
          /*
           * Renders the Cart Summary in the cart-summary turbo frame
           */
          public function showCartSummary(Request $request): Response
          {
              $frameId = $request->headers->get('Turbo-Frame', 'sidebar');

              return $this->render('cartSummary.html.twig', [
                  frameId => $frameId,
              ]);
          }
          ```
      correct: a

modal_frame_close:
  question: |
    Which of the following statements is *not* true?
  explanation: |
    The `turbo:submit-end` event happens *after* a form has been submitted and
    therefore it contains information about the response from the controller.
    
    > Turbo form events are different from other events in that they are fired
    > from the `<form>` element instead of the `Document`, so you can attach
    > event listeners to the forms themselves or any of their parent elements.
  features:
    choices:
      a: |
        `turbo:submit-end` happens after we submit a form.
      b: |
        The `turbo:submit-end` event contains the HTML of the response.
      c: |
        The `turbo:submit-end` event contains information about the response,
        like the `success` key.
    correct: b

prevent_frame_rendering:
  question: |
    Which of these statements is false about the `turbo:before-fetch-response` and
    `turbo:submit-end` events?
  explanation: |
    The `turbo:before-fetch-request` and `turbo:before-fetch-response` events
    allow us to cancel the rendering of the response from the form, while
    `turbo:submit-start` and `turbo:submit-end` don't!
  features:
    choices:
      a: |
        The `turbo:before-fetch-response` event is fired from the `<body>` element
        while `turbo:submit-end` is fired from the `<form>` element.
      b: |
        The `turbo:before-fetch-response` event allows us to cancel the event,
        while `turbo:submit-end` doesn't.
      c: |
        The `turbo:before-fetch-response` event doesn't contain any extra
        information in the `event.detail` property (such as `success`) while `turbo:submit-end`
        does contain it.
    correct: c
