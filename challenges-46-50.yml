manual_stream:
  question: |
    How does the function `renderStreamMessage` work?
  explanation: |
    `renderStreamMessage` allows us to modify different areas on a page
    using the Turbo Streams markup
  features:
    multiple_choice:
      choices:
        a: |
          `renderStreamMessage` takes a Response object from a `fetch` function and
          processes the response in order to make changes in your page.
        b: |
          `renderStreamMessage` takes a plain string as an argument and uses your pages'
          flash alerts container to append it to the list of flash messages. Basically
          a client side version of the Symfony flash message feature.
        c: |
          `renderStreamMessage` takes a Turbo Stream formatted HTML as a string and
          immediately processes it in order to change different parts of you page
          on demand.
        d: |
          `renderStreamMessage` takes a plain string as an argument and pops up
          a nicely styled dialog with it and a close button, similar to SweetAlert.
      correct: c

manual_stream_2:
  question: |
    My base template has a flash container where I render all my application's flash
    messages. It goes like this:
    
    ```twig
    <div id="flash-container">
    {% for flash in app.session.flashBag.get('success') %}
        <div class="alert alert-success">
            {{ flash }}
        </div>
    {% endfor %}
    </div>
    ```
    
    One issue I've noticed is that once these messages are dismissed, they tend to reappear
    for a few seconds if I click the back button in my browser. This is due to the messages being
    cached by Turbo.
    
    How can I avoid this from happening?
  explanation: |
    The `data-tutbo-cached="false"` attribute is used to prevent Turbo from cachingg any
    part of your page that needs to be tryly dynamic!
  features:
    multiple_choice:
      choices:
        a: |
          ```twig
          <div id="flash-container" data-turbo-cache="false">
          {% for flash in app.session.flashBag.get('success') %}
              <div class="alert alert-success">
                  {{ flash }}
              </div>
          {% endfor %}
          </div>
          ```
        b: |
          ```twig
          <div id="flash-container" data-cache="false">
          {% for flash in app.session.flashBag.get('success') %}
              <div class="alert alert-success">
                  {{ flash }}
              </div>
          {% endfor %}
          </div>
          ```
        c: |
          ```twig
          <div id="flash-container">
              <meta name="data-turbo-cache" content="false">
              {% for flash in app.session.flashBag.get('success') %}
                  <div class="alert alert-success">
                      {{ flash }}
                  </div>
              {% endfor %}
          </div>
          ```
        d: |
          Both A and C are correct.
      correct: a